/*
 * Copyright 2012 Alex Usachev, thothbot@gmail.com
 * 
 * This file is part of Parallax project.
 * 
 * Parallax is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 * 
 * Parallax is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * Parallax. If not, see http://www.gnu.org/licenses/.
 */

package thothbot.parallax.core.client.gl2.enums;

public enum FramebufferObject 
{
	FRAMEBUFFER(GLEnum.FRAMEBUFFER),
	RENDERBUFFER(GLEnum.RENDERBUFFER),
	RGBA4(GLEnum.RGBA4),
	RGB5_A1(GLEnum.RGB5_A1),
	RGB565(GLEnum.RGB565),
	DEPTH_COMPONENT16(GLEnum.DEPTH_COMPONENT16),
	STENCIL_INDEX(GLEnum.STENCIL_INDEX),
	STENCIL_INDEX8(GLEnum.STENCIL_INDEX8),
	RENDERBUFFER_WIDTH(GLEnum.RENDERBUFFER_WIDTH),
	RENDERBUFFER_HEIGHT(GLEnum.RENDERBUFFER_HEIGHT),
	RENDERBUFFER_INTERNAL_FORMAT(GLEnum.RENDERBUFFER_INTERNAL_FORMAT),
	RENDERBUFFER_RED_SIZE(GLEnum.RENDERBUFFER_RED_SIZE),
	RENDERBUFFER_GREEN_SIZE(GLEnum.RENDERBUFFER_GREEN_SIZE),
	RENDERBUFFER_BLUE_SIZE(GLEnum.RENDERBUFFER_BLUE_SIZE),
	RENDERBUFFER_ALPHA_SIZE(GLEnum.RENDERBUFFER_ALPHA_SIZE),
	RENDERBUFFER_DEPTH_SIZE(GLEnum.RENDERBUFFER_DEPTH_SIZE),
	RENDERBUFFER_STENCIL_SIZE(GLEnum.RENDERBUFFER_STENCIL_SIZE),
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE(GLEnum.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE),
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME(GLEnum.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL(GLEnum.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE(GLEnum.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE),
	COLOR_ATTACHMENT0(GLEnum.COLOR_ATTACHMENT0),
	DEPTH_ATTACHMENT(GLEnum.DEPTH_ATTACHMENT),
	STENCIL_ATTACHMENT(GLEnum.STENCIL_ATTACHMENT),
	NONE(GLEnum.NONE),
	FRAMEBUFFER_COMPLETE(GLEnum.FRAMEBUFFER_COMPLETE),
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT(GLEnum.FRAMEBUFFER_INCOMPLETE_ATTACHMENT),
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT(GLEnum.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS(GLEnum.FRAMEBUFFER_INCOMPLETE_DIMENSIONS),
	FRAMEBUFFER_UNSUPPORTED(GLEnum.FRAMEBUFFER_UNSUPPORTED),
	FRAMEBUFFER_BINDING(GLEnum.FRAMEBUFFER_BINDING),
	RENDERBUFFER_BINDING(GLEnum.RENDERBUFFER_BINDING),
	MAX_RENDERBUFFER_SIZE(GLEnum.MAX_RENDERBUFFER_SIZE),
	INVALID_FRAMEBUFFER_OPERATION(GLEnum.INVALID_FRAMEBUFFER_OPERATION);

	private final int value;

	private FramebufferObject(GLEnum glEnum) {
		this.value = glEnum.getValue();
	}
	/**
	 * Gets the enum's numerical value.
	 */
	 public int getValue() {
		 return value;
	 }
}
